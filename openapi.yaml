openapi: "3.0.0"
info:
  version: 0.1.0
  title: Algonaut - Algoneer API
  description: An API that persists test results from Algoneer to display them in our web app.
  termsOfService: https://algoneer.org
  contact:
    name: Algoneer Team
    email: algonaut@algoneer.org
    url: https://algoneer.org
  license:
    name: Affero General Public License
    url: https://www.gnu.org/licenses/agpl-3.0.de.html
servers:
  - url: https://app.algoneer.org
paths:
  /organizations:
    get:
      description: |
        Returns all of the current users organization.
      operationId: listOrganizations
      parameters: []
      responses:
        '200':
          description: organization roles response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Organization'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /organizations/{id}/projects:
    post:
      description: Creates a new project for the given organization.
      operationId: createProject
      parameters: 
        - $ref: '#/components/parameters/OrganizationID'
      requestBody:
        description: Project to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseProject'
      responses:
        '201':
          description: project response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects:
    get:
      description: |
        Returns all projects that you can see.
      operationId: listProjects
      parameters: []
      responses:
        '200':
          description: projects response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{id}:
    get:
      description: |
        Returns details for a particular project.
      operationId: getProjectDetails
      parameters: 
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: project details response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{id}/datasets:
    get:
      description: |
        Returns all datasets that you can see.
      operationId: listDatasets
      parameters:
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: datasets response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dataset'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new dataset.
      operationId: createDataset
      parameters:
        - $ref: '#/components/parameters/ID'
      requestBody:
        description: Dataset to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDataset'
      responses:
        '201':
          description: dataset response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{id}/algorithms:
    get:
      description: |
        Returns all algorithms that you can see.
      operationId: listAlgorithms
      parameters:
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: algorithms response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Algorithm'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new algorithm.
      operationId: createAlgorithm
      parameters:
        - $ref: '#/components/parameters/ID'
      requestBody:
        description: Algorithm to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseAlgorithm'
      responses:
        '201':
          description: algorithm response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Algorithm'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /algorithms/{id}:
    get:
      description: |
        Returns details for a particular algorithm.
      operationId: getAlgorithmDetails
      parameters:
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: algorithms response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Algorithm'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /algorithms/{id}/results:
    get:
      description: |
        Returns all results for a given algorithm.
      operationId: listAlgorithmResults
      parameters:
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: results response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Result'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new result for a given algorithm.
      operationId: createAlgorithmResult
      parameters:
        - $ref: '#/components/parameters/ID'
      requestBody:
        description: Result to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Result'
      responses:
        '201':
          description: result response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /algorithms/{id}/results/{dependent_id}:
    get:
      description: |
        Returns details for a given result of a given algorithm.
      operationId: getAlgorithmResultDetails
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: "#/components/parameters/DependentID"
      responses:
        '200':
          description: result response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /algorithms/{id}/schemas:
    get:
      description: |
        Returns all schemas of a given algorithm.
      operationId: listAlgorithmSchemas
      parameters:
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: algorithm schemas response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AlgorithmSchema'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new algorithm schema and associate it with a algorithm.
      operationId: createAlgorithmSchema
      parameters:
        - $ref: '#/components/parameters/ID'
      requestBody:
        description: Algorithm schema to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseAlgorithmSchema'
      responses:
        '201':
          description: algorithm schema response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlgorithmSchema'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /algorithms/{id}/schemas/{dependent_id}:
    get:
      description: |
        Returns details for a particular algorithm schema.
      operationId: getAlgorithmSchemaDetails
      parameters:
       - $ref: '#/components/parameters/ID'
       - $ref: '#/components/parameters/DependentID'
      responses:
        '200':
          description: algorithm schema response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlgorithmSchema'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /algorithms/{id}/models:
    get:
      description: |
        Returns all models for a given algorithm that you can see.
      operationId: listModels
      parameters:
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: models response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /models/{id}:
    get:
      description: |
        Returns details for a particular model.
      operationId: getModelDetails
      parameters:
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: model response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /models/{id}/results:
    get:
      description: |
        Returns all results for a given model.
      operationId: listModelResults
      parameters:
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: model results response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Result'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new result for a given model.
      operationId: createModelResult
      parameters:
        - $ref: '#/components/parameters/ID'
      requestBody:
        description: Result to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Result'
      responses:
        '201':
          description: result response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /models/{id}/results/{dependent_id}:
    get:
      description: |
        Returns details for a given result of a given model.
      operationId: getModelResultDetails
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: "#/components/parameters/DependentID"
      responses:
        '200':
          description: result response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /models/{id}/datasetresults/{dependent_id}:
    get:
      description: |
        Returns details for a given result of a given dataset and model.
      operationId: getDatasetModelResultDetails
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: "#/components/parameters/DependentID"
      responses:
        '200':
          description: result response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /models/{id}/datapointresults/{dependent_id}:
    get:
      description: |
        Returns details for a given result of a given datapoint and model.
      operationId: getDatapointModelResultDetails
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: "#/components/parameters/DependentID"
      responses:
        '200':
          description: result response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /datasets/{id}:
    get:
      description: |
        Returns details for a particular dataset.
      operationId: getDatasetDetails
      parameters:
       - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: dataset response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /datasets/{id}/models:
    get:
      description: |
        Returns all models for a given dataset.
      operationId: listDatasetModels
      parameters:
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: models response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /datasets/{id}/results:
    get:
      description: |
        Returns all results for a given dataset.
      operationId: listDatasetResults
      parameters:
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: results response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Result'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new result for a given dataset.
      operationId: createDatasetResult
      parameters:
        - $ref: '#/components/parameters/ID'
      requestBody:
        description: Result to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Result'
      responses:
        '201':
          description: result response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /datasets/{id}/results/{dependent_id}:
    get:
      description: |
        Returns details for a given result of a given dataset.
      operationId: getDatasetResultDetails
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: "#/components/parameters/DependentID"
      responses:
        '200':
          description: result response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /datasets/{id}/schemas:
    get:
      description: |
        Returns all schemas of a given dataset.
      operationId: listDataSchemas
      parameters:
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: data schemas response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DataSchema'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new data schema and associate it with a dataset.
      operationId: createDataSchema
      parameters:
        - $ref: '#/components/parameters/ID'
      requestBody:
        description: Data schema to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDataSchema'
      responses:
        '201':
          description: data schema response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSchema'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /datasets/{id}/schemas/{dependent_id}:
    get:
      description: |
        Returns details for a particular data schema.
      operationId: getDataSchemaDetails
      parameters:
       - $ref: '#/components/parameters/ID'
       - $ref: '#/components/parameters/DependentID'
      responses:
        '200':
          description: data schema response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSchema'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /datasets/{id}/algorithms/{dependent_id}/models:
    post:
      description: Creates a new model for a given algorithm.
      operationId: createModel
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: "#/components/parameters/DependentID"
      requestBody:
        description: Model to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseModel'
      responses:
        '201':
          description: model response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /datasets/{id}/models/{dependent_id}/results:
    get:
      description: |
        Returns all results for a given dataset and model.
      operationId: listDatasetModelResults
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: "#/components/parameters/DependentID"
      responses:
        '200':
          description: results response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Result'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new result for a given dataset and model.
      operationId: createDatasetModelResult
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: "#/components/parameters/DependentID"
      requestBody:
        description: Result to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Result'
      responses:
        '201':
          description: result response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /datasets/{id}/datapoints:
    get:
      description: |
        Returns all datapoints of a dataset that you can see.
      operationId: listDatapoints
      parameters:
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: datapoints response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Datapoint'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new datapoint.
      operationId: createDatapoint
      parameters:
        - $ref: '#/components/parameters/ID'
      requestBody:
        description: Datapoint to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDatapoint'
      responses:
        '201':
          description: datapoint response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Datapoint'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /datasets/{id}/datapoints/{dependent_id}:
    get:
      description: |
        Returns details for a particular datapoints.
      operationId: getDatapointDetails
      parameters:
       - $ref: '#/components/parameters/ID'
       - $ref: '#/components/parameters/DependentID'
      responses:
        '200':
          description: datapoint response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Datapoint'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /datapoints/{id}/models/{dependent_id}/results:
    get:
      description: |
        Returns all results for a given datapoint and model.
      operationId: listDatapointModelResults
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: "#/components/parameters/DependentID"
      responses:
        '200':
          description: results response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Result'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new result for a given datapoint and model.
      operationId: createDatapointModelResult
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: "#/components/parameters/DependentID"
      requestBody:
        description: Result to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Result'
      responses:
        '201':
          description: result response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /object_roles:
    get:
      description: |
        Returns all object roles that you can see.
      operationId: listObjectRoles
      parameters: []
      responses:
        '200':
          description: object roles response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ObjectRole'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new object role.
      operationId: createObjectRole
      requestBody:
        description: Object role to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseObjectRole'
      responses:
        '201':
          description: object role response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectRole'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /object_roles/{id}:
    get:
      description: |
        Returns details for a given object role.
      operationId: getObjectRoleDetails
      parameters:
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: object role response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectRole'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  parameters:
    DependentID:
      name: dependent_id
      in: path
      description: ID of dependent object to fetch
      required: true
      schema:
        type: string
        format: uuid
    ID:
      name: id
      in: path
      description: ID of dependent object to fetch
      required: true
      schema:
        type: string
        format: uuid
    OrganizationID:
      name: id
      in: path
      description: ID of the organization
      required: true
      schema:
        type: string
        format: uuid
  schemas:
    Base:
      type: object
      properties:
        id:
          type: string
          format: uuid
    Project:
      allOf:
        - $ref: '#/components/schemas/BaseProject'
        - $ref: '#/components/schemas/Base'
    BaseProject:
      type: object
      required:
        - path
        - name
      properties:
        path:
          type: string
          example: hr/candidate-selection
        name:
          type: string
          example: HR - Candidate Selection
        data:
          type: object
    Algorithm:
      allOf:
        - $ref: '#/components/schemas/BaseAlgorithm'
        - $ref: '#/components/schemas/Base'
    BaseAlgorithm:
      type: object
      required:
        - data
      properties:
        data:
          type: object
    Model:
      allOf:
        - $ref: '#/components/schemas/BaseModel'
        - $ref: '#/components/schemas/Base'
    BaseModel:
      type: object
      required:
        - data
      properties:
        data:
          type: object
    Result:
      allOf:
        - $ref: '#/components/schemas/BaseResult'
        - $ref: '#/components/schemas/Base'
    BaseResult:
      type: object
      required:
        - data
      properties:
        data:
          type: object
    Organization:
      type: object
      properties:
        roles:
          type: array
          items:
            type: string
            example: admin
        id:
          type: string
          format: hex
          example: fa43f7fafcd832483dfca
        name:
          type: string
          example: acme
        title:
          type: string
          example: ACME!
        description:
          type: string
          example: The mighty ACME corporation.
        source:
          type: string
          example: worf
    ObjectRole:
      allOf:
        - $ref: '#/components/schemas/BaseObjectRole'
        - $ref: '#/components/schemas/Base'
    BaseObjectRole:
      type: object
      required:
        - object_id
        - object_type
        - object_role
        - organization_id
        - organization_role
      properties:
        data:
          type: object
        object_id:
          type: string
          format: uuid
        object_type:
          type: string
        object_role:
          type: string
        organization_id:
          type: string
          format: uuid
        organization_role:
          type: string
    BaseDataset:
      type: object
      required:
        - data
        - name
      properties:
        name:
          type: string
          example: my-dataset
        data:
          type: object
    Dataset:
      allOf:
        - $ref: '#/components/schemas/BaseDataset'
        - $ref: '#/components/schemas/Base'
    Datapoint:
      allOf:
        - $ref: '#/components/schemas/BaseDatapoint'
        - $ref: '#/components/schemas/Base'
    BaseDatapoint:
      type: object
      required:
        - data
      properties:
        data:
          type: object
    DataSchema:
      allOf:
        - $ref: '#/components/schemas/BaseDataSchema'
        - $ref: '#/components/schemas/Base'
    BaseDataSchema:
      type: object
      required:
        - data
      properties:
        data:
          type: object
    AlgorithmSchema:
      allOf:
        - $ref: '#/components/schemas/BaseAlgorithmSchema'
        - $ref: '#/components/schemas/Base'
    BaseAlgorithmSchema:
      type: object
      required:
        - data
      properties:
        data:
          type: object
    Error:
      type: object
      required:
        - errors
        - message
      properties:
        message:
          type: string
          example: error message
        errors:
          type: object
          example:
            path: [invalid path]